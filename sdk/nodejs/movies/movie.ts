// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Movies -->Movie resource.
 * For more information refer to [Movies](https://wiki.servarr.com/whisparr/library#movies) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as whisparr from "@maienm/pulumi-whisparr";
 *
 * const example = new whisparr.movies.Movie("example", {
 *     minimumAvailability: "inCinemas",
 *     monitored: false,
 *     path: "/movies/Blue_Movie_1969",
 *     qualityProfileId: 1,
 *     title: "Blue Movie",
 *     tmdbId: 242423,
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import whisparr:Movies/movie:Movie example 10
 * ```
 */
export class Movie extends pulumi.CustomResource {
    /**
     * Get an existing Movie resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MovieState, opts?: pulumi.CustomResourceOptions): Movie {
        return new Movie(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'whisparr:Movies/movie:Movie';

    /**
     * Returns true if the given object is an instance of Movie.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Movie {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Movie.__pulumiType;
    }

    /**
     * List genres.
     */
    public /*out*/ readonly genres!: pulumi.Output<string[]>;
    /**
     * IMDB ID.
     */
    public /*out*/ readonly imdbId!: pulumi.Output<string>;
    /**
     * Availability flag.
     */
    public /*out*/ readonly isAvailable!: pulumi.Output<boolean>;
    /**
     * Minimum availability.
     * Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
     */
    public readonly minimumAvailability!: pulumi.Output<string>;
    /**
     * Monitored flag.
     */
    public readonly monitored!: pulumi.Output<boolean>;
    /**
     * Original language.
     */
    public /*out*/ readonly originalLanguage!: pulumi.Output<outputs.Movies.MovieOriginalLanguage>;
    /**
     * Movie original title.
     */
    public /*out*/ readonly originalTitle!: pulumi.Output<string>;
    /**
     * Overview.
     */
    public /*out*/ readonly overview!: pulumi.Output<string>;
    /**
     * Full movie path.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Quality profile ID.
     */
    public readonly qualityProfileId!: pulumi.Output<number>;
    /**
     * Movie status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;
    /**
     * Movie title.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * TMDB ID.
     */
    public readonly tmdbId!: pulumi.Output<number>;
    /**
     * Website.
     */
    public /*out*/ readonly website!: pulumi.Output<string>;
    /**
     * Year.
     */
    public /*out*/ readonly year!: pulumi.Output<number>;
    /**
     * Youtube trailer ID.
     */
    public /*out*/ readonly youtubeTrailerId!: pulumi.Output<string>;

    /**
     * Create a Movie resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MovieArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MovieArgs | MovieState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MovieState | undefined;
            resourceInputs["genres"] = state ? state.genres : undefined;
            resourceInputs["imdbId"] = state ? state.imdbId : undefined;
            resourceInputs["isAvailable"] = state ? state.isAvailable : undefined;
            resourceInputs["minimumAvailability"] = state ? state.minimumAvailability : undefined;
            resourceInputs["monitored"] = state ? state.monitored : undefined;
            resourceInputs["originalLanguage"] = state ? state.originalLanguage : undefined;
            resourceInputs["originalTitle"] = state ? state.originalTitle : undefined;
            resourceInputs["overview"] = state ? state.overview : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["qualityProfileId"] = state ? state.qualityProfileId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["tmdbId"] = state ? state.tmdbId : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
            resourceInputs["year"] = state ? state.year : undefined;
            resourceInputs["youtubeTrailerId"] = state ? state.youtubeTrailerId : undefined;
        } else {
            const args = argsOrState as MovieArgs | undefined;
            if ((!args || args.monitored === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitored'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.qualityProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qualityProfileId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.tmdbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tmdbId'");
            }
            resourceInputs["minimumAvailability"] = args ? args.minimumAvailability : undefined;
            resourceInputs["monitored"] = args ? args.monitored : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["qualityProfileId"] = args ? args.qualityProfileId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["tmdbId"] = args ? args.tmdbId : undefined;
            resourceInputs["genres"] = undefined /*out*/;
            resourceInputs["imdbId"] = undefined /*out*/;
            resourceInputs["isAvailable"] = undefined /*out*/;
            resourceInputs["originalLanguage"] = undefined /*out*/;
            resourceInputs["originalTitle"] = undefined /*out*/;
            resourceInputs["overview"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["website"] = undefined /*out*/;
            resourceInputs["year"] = undefined /*out*/;
            resourceInputs["youtubeTrailerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Movie.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Movie resources.
 */
export interface MovieState {
    /**
     * List genres.
     */
    genres?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IMDB ID.
     */
    imdbId?: pulumi.Input<string>;
    /**
     * Availability flag.
     */
    isAvailable?: pulumi.Input<boolean>;
    /**
     * Minimum availability.
     * Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
     */
    minimumAvailability?: pulumi.Input<string>;
    /**
     * Monitored flag.
     */
    monitored?: pulumi.Input<boolean>;
    /**
     * Original language.
     */
    originalLanguage?: pulumi.Input<inputs.Movies.MovieOriginalLanguage>;
    /**
     * Movie original title.
     */
    originalTitle?: pulumi.Input<string>;
    /**
     * Overview.
     */
    overview?: pulumi.Input<string>;
    /**
     * Full movie path.
     */
    path?: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId?: pulumi.Input<number>;
    /**
     * Movie status.
     */
    status?: pulumi.Input<string>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Movie title.
     */
    title?: pulumi.Input<string>;
    /**
     * TMDB ID.
     */
    tmdbId?: pulumi.Input<number>;
    /**
     * Website.
     */
    website?: pulumi.Input<string>;
    /**
     * Year.
     */
    year?: pulumi.Input<number>;
    /**
     * Youtube trailer ID.
     */
    youtubeTrailerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Movie resource.
 */
export interface MovieArgs {
    /**
     * Minimum availability.
     * Allowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.
     */
    minimumAvailability?: pulumi.Input<string>;
    /**
     * Monitored flag.
     */
    monitored: pulumi.Input<boolean>;
    /**
     * Full movie path.
     */
    path: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId: pulumi.Input<number>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Movie title.
     */
    title: pulumi.Input<string>;
    /**
     * TMDB ID.
     */
    tmdbId: pulumi.Input<number>;
}
