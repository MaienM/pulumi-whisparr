// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Metadata -->Metadata Wdtv resource.
 * For more information refer to [Metadata](https://wiki.servarr.com/whisparr/settings#metadata) and [WDTV](https://wiki.servarr.com/whisparr/supported#wdtvmetadata).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as whisparr from "@maienm/pulumi-whisparr";
 *
 * const example = new whisparr.metadata.MetadataWdtv("example", {
 *     enable: true,
 *     movieImages: true,
 *     movieMetadata: true,
 *     name: "Example",
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import whisparr:Metadata/metadataWdtv:MetadataWdtv example 1
 * ```
 */
export class MetadataWdtv extends pulumi.CustomResource {
    /**
     * Get an existing MetadataWdtv resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetadataWdtvState, opts?: pulumi.CustomResourceOptions): MetadataWdtv {
        return new MetadataWdtv(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'whisparr:Metadata/metadataWdtv:MetadataWdtv';

    /**
     * Returns true if the given object is an instance of MetadataWdtv.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetadataWdtv {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetadataWdtv.__pulumiType;
    }

    /**
     * Enable flag.
     */
    public readonly enable!: pulumi.Output<boolean>;
    /**
     * Movie images flag.
     */
    public readonly movieImages!: pulumi.Output<boolean>;
    /**
     * Movie metadata flag.
     */
    public readonly movieMetadata!: pulumi.Output<boolean>;
    /**
     * Metadata name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;

    /**
     * Create a MetadataWdtv resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataWdtvArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetadataWdtvArgs | MetadataWdtvState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetadataWdtvState | undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["movieImages"] = state ? state.movieImages : undefined;
            resourceInputs["movieMetadata"] = state ? state.movieMetadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as MetadataWdtvArgs | undefined;
            if ((!args || args.movieImages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'movieImages'");
            }
            if ((!args || args.movieMetadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'movieMetadata'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["movieImages"] = args ? args.movieImages : undefined;
            resourceInputs["movieMetadata"] = args ? args.movieMetadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetadataWdtv.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetadataWdtv resources.
 */
export interface MetadataWdtvState {
    /**
     * Enable flag.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Movie images flag.
     */
    movieImages?: pulumi.Input<boolean>;
    /**
     * Movie metadata flag.
     */
    movieMetadata?: pulumi.Input<boolean>;
    /**
     * Metadata name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a MetadataWdtv resource.
 */
export interface MetadataWdtvArgs {
    /**
     * Enable flag.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Movie images flag.
     */
    movieImages: pulumi.Input<boolean>;
    /**
     * Movie metadata flag.
     */
    movieMetadata: pulumi.Input<boolean>;
    /**
     * Metadata name.
     */
    name: pulumi.Input<string>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}
