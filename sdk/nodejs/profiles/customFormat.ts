// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Profiles -->Custom Format resource.
 * For more information refer to [Custom Format](https://wiki.servarr.com/whisparr/settings#custom-formats).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as whisparr from "@maienm/pulumi-whisparr";
 *
 * const example = new whisparr.profiles.CustomFormat("example", {
 *     includeCustomFormatWhenRenaming: true,
 *     name: "Example",
 *     specifications: [
 *         {
 *             implementation: "ReleaseTitleSpecification",
 *             name: "Surround Sound",
 *             negate: false,
 *             required: false,
 *             value: "DTS.?(HD|ES|X(?!\\D))|TRUEHD|ATMOS|DD(\\+|P).?([5-9])|EAC3.?([5-9])",
 *         },
 *         {
 *             implementation: "LanguageSpecification",
 *             name: "Arabic",
 *             negate: false,
 *             required: false,
 *             value: "31",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import whisparr:Profiles/customFormat:CustomFormat example 1
 * ```
 */
export class CustomFormat extends pulumi.CustomResource {
    /**
     * Get an existing CustomFormat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomFormatState, opts?: pulumi.CustomResourceOptions): CustomFormat {
        return new CustomFormat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'whisparr:Profiles/customFormat:CustomFormat';

    /**
     * Returns true if the given object is an instance of CustomFormat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomFormat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomFormat.__pulumiType;
    }

    /**
     * Include custom format when renaming flag.
     */
    public readonly includeCustomFormatWhenRenaming!: pulumi.Output<boolean>;
    /**
     * Custom Format name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifications.
     */
    public readonly specifications!: pulumi.Output<outputs.Profiles.CustomFormatSpecification[]>;

    /**
     * Create a CustomFormat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomFormatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomFormatArgs | CustomFormatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomFormatState | undefined;
            resourceInputs["includeCustomFormatWhenRenaming"] = state ? state.includeCustomFormatWhenRenaming : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["specifications"] = state ? state.specifications : undefined;
        } else {
            const args = argsOrState as CustomFormatArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.specifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specifications'");
            }
            resourceInputs["includeCustomFormatWhenRenaming"] = args ? args.includeCustomFormatWhenRenaming : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["specifications"] = args ? args.specifications : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomFormat.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomFormat resources.
 */
export interface CustomFormatState {
    /**
     * Include custom format when renaming flag.
     */
    includeCustomFormatWhenRenaming?: pulumi.Input<boolean>;
    /**
     * Custom Format name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifications.
     */
    specifications?: pulumi.Input<pulumi.Input<inputs.Profiles.CustomFormatSpecification>[]>;
}

/**
 * The set of arguments for constructing a CustomFormat resource.
 */
export interface CustomFormatArgs {
    /**
     * Include custom format when renaming flag.
     */
    includeCustomFormatWhenRenaming?: pulumi.Input<boolean>;
    /**
     * Custom Format name.
     */
    name: pulumi.Input<string>;
    /**
     * Specifications.
     */
    specifications: pulumi.Input<pulumi.Input<inputs.Profiles.CustomFormatSpecification>[]>;
}
