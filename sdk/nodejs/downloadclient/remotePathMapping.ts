// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Download Clients -->Remote Path Mapping resource.
 * For more information refer to [Remote Path Mapping](https://wiki.servarr.com/whisparr/settings#remote-path-mappings) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as whisparr from "@maienm/pulumi-whisparr";
 *
 * const example = new whisparr.downloadclient.RemotePathMapping("example", {
 *     host: "www.transmission.com",
 *     localPath: "/transmission-download/",
 *     remotePath: "/download/",
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import whisparr:DownloadClient/remotePathMapping:RemotePathMapping example 10
 * ```
 */
export class RemotePathMapping extends pulumi.CustomResource {
    /**
     * Get an existing RemotePathMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemotePathMappingState, opts?: pulumi.CustomResourceOptions): RemotePathMapping {
        return new RemotePathMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'whisparr:DownloadClient/remotePathMapping:RemotePathMapping';

    /**
     * Returns true if the given object is an instance of RemotePathMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemotePathMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemotePathMapping.__pulumiType;
    }

    /**
     * Download Client host.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Local path.
     */
    public readonly localPath!: pulumi.Output<string>;
    /**
     * Download Client remote path.
     */
    public readonly remotePath!: pulumi.Output<string>;

    /**
     * Create a RemotePathMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemotePathMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemotePathMappingArgs | RemotePathMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemotePathMappingState | undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["localPath"] = state ? state.localPath : undefined;
            resourceInputs["remotePath"] = state ? state.remotePath : undefined;
        } else {
            const args = argsOrState as RemotePathMappingArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.localPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localPath'");
            }
            if ((!args || args.remotePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remotePath'");
            }
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["localPath"] = args ? args.localPath : undefined;
            resourceInputs["remotePath"] = args ? args.remotePath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RemotePathMapping.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RemotePathMapping resources.
 */
export interface RemotePathMappingState {
    /**
     * Download Client host.
     */
    host?: pulumi.Input<string>;
    /**
     * Local path.
     */
    localPath?: pulumi.Input<string>;
    /**
     * Download Client remote path.
     */
    remotePath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemotePathMapping resource.
 */
export interface RemotePathMappingArgs {
    /**
     * Download Client host.
     */
    host: pulumi.Input<string>;
    /**
     * Local path.
     */
    localPath: pulumi.Input<string>;
    /**
     * Download Client remote path.
     */
    remotePath: pulumi.Input<string>;
}
