// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Import Lists -->Import List TMDB Popular resource.
 * For more information refer to [Import List](https://wiki.servarr.com/whisparr/settings#import-lists) and [TMDB Popular](https://wiki.servarr.com/whisparr/supported#tmdbpopularimport).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as whisparr from "@maienm/pulumi-whisparr";
 *
 * const example = new whisparr.importlists.ImportListTmdbPopular("example", {
 *     enableAuto: false,
 *     enabled: true,
 *     languageCode: 2,
 *     minVoteAverage: "5",
 *     minVotes: "1",
 *     minimumAvailability: "tba",
 *     name: "Example",
 *     qualityProfileId: 1,
 *     rootFolderPath: "/config",
 *     searchOnAdd: false,
 *     shouldMonitor: true,
 *     tmdbCertification: "PG-13",
 *     tmdbListType: 2,
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import whisparr:ImportLists/importListTmdbPopular:ImportListTmdbPopular example 1
 * ```
 */
export class ImportListTmdbPopular extends pulumi.CustomResource {
    /**
     * Get an existing ImportListTmdbPopular resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImportListTmdbPopularState, opts?: pulumi.CustomResourceOptions): ImportListTmdbPopular {
        return new ImportListTmdbPopular(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'whisparr:ImportLists/importListTmdbPopular:ImportListTmdbPopular';

    /**
     * Returns true if the given object is an instance of ImportListTmdbPopular.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImportListTmdbPopular {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImportListTmdbPopular.__pulumiType;
    }

    /**
     * Enable automatic add flag.
     */
    public readonly enableAuto!: pulumi.Output<boolean>;
    /**
     * Enabled flag.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Exclude genre IDs.
     */
    public readonly excludeGenreIds!: pulumi.Output<string>;
    /**
     * Include genre IDs.
     */
    public readonly includeGenreIds!: pulumi.Output<string>;
    /**
     * Language code.
     */
    public readonly languageCode!: pulumi.Output<number>;
    /**
     * List order.
     */
    public readonly listOrder!: pulumi.Output<number>;
    /**
     * Min vote average.
     */
    public readonly minVoteAverage!: pulumi.Output<string>;
    /**
     * Min votes.
     */
    public readonly minVotes!: pulumi.Output<string>;
    /**
     * Minimum availability.
     */
    public readonly minimumAvailability!: pulumi.Output<string>;
    /**
     * Import List name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Quality profile ID.
     */
    public readonly qualityProfileId!: pulumi.Output<number>;
    /**
     * Root folder path.
     */
    public readonly rootFolderPath!: pulumi.Output<string>;
    /**
     * Search on add flag.
     */
    public readonly searchOnAdd!: pulumi.Output<boolean>;
    /**
     * Should monitor.
     */
    public readonly shouldMonitor!: pulumi.Output<boolean>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;
    /**
     * Certification.
     */
    public readonly tmdbCertification!: pulumi.Output<string>;
    /**
     * TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
     */
    public readonly tmdbListType!: pulumi.Output<number>;

    /**
     * Create a ImportListTmdbPopular resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImportListTmdbPopularArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImportListTmdbPopularArgs | ImportListTmdbPopularState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImportListTmdbPopularState | undefined;
            resourceInputs["enableAuto"] = state ? state.enableAuto : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["excludeGenreIds"] = state ? state.excludeGenreIds : undefined;
            resourceInputs["includeGenreIds"] = state ? state.includeGenreIds : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["listOrder"] = state ? state.listOrder : undefined;
            resourceInputs["minVoteAverage"] = state ? state.minVoteAverage : undefined;
            resourceInputs["minVotes"] = state ? state.minVotes : undefined;
            resourceInputs["minimumAvailability"] = state ? state.minimumAvailability : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["qualityProfileId"] = state ? state.qualityProfileId : undefined;
            resourceInputs["rootFolderPath"] = state ? state.rootFolderPath : undefined;
            resourceInputs["searchOnAdd"] = state ? state.searchOnAdd : undefined;
            resourceInputs["shouldMonitor"] = state ? state.shouldMonitor : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tmdbCertification"] = state ? state.tmdbCertification : undefined;
            resourceInputs["tmdbListType"] = state ? state.tmdbListType : undefined;
        } else {
            const args = argsOrState as ImportListTmdbPopularArgs | undefined;
            if ((!args || args.languageCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'languageCode'");
            }
            if ((!args || args.minimumAvailability === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minimumAvailability'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.qualityProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qualityProfileId'");
            }
            if ((!args || args.rootFolderPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootFolderPath'");
            }
            if ((!args || args.shouldMonitor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shouldMonitor'");
            }
            if ((!args || args.tmdbListType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tmdbListType'");
            }
            resourceInputs["enableAuto"] = args ? args.enableAuto : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["excludeGenreIds"] = args ? args.excludeGenreIds : undefined;
            resourceInputs["includeGenreIds"] = args ? args.includeGenreIds : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["listOrder"] = args ? args.listOrder : undefined;
            resourceInputs["minVoteAverage"] = args ? args.minVoteAverage : undefined;
            resourceInputs["minVotes"] = args ? args.minVotes : undefined;
            resourceInputs["minimumAvailability"] = args ? args.minimumAvailability : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["qualityProfileId"] = args ? args.qualityProfileId : undefined;
            resourceInputs["rootFolderPath"] = args ? args.rootFolderPath : undefined;
            resourceInputs["searchOnAdd"] = args ? args.searchOnAdd : undefined;
            resourceInputs["shouldMonitor"] = args ? args.shouldMonitor : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tmdbCertification"] = args ? args.tmdbCertification : undefined;
            resourceInputs["tmdbListType"] = args ? args.tmdbListType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImportListTmdbPopular.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImportListTmdbPopular resources.
 */
export interface ImportListTmdbPopularState {
    /**
     * Enable automatic add flag.
     */
    enableAuto?: pulumi.Input<boolean>;
    /**
     * Enabled flag.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Exclude genre IDs.
     */
    excludeGenreIds?: pulumi.Input<string>;
    /**
     * Include genre IDs.
     */
    includeGenreIds?: pulumi.Input<string>;
    /**
     * Language code.
     */
    languageCode?: pulumi.Input<number>;
    /**
     * List order.
     */
    listOrder?: pulumi.Input<number>;
    /**
     * Min vote average.
     */
    minVoteAverage?: pulumi.Input<string>;
    /**
     * Min votes.
     */
    minVotes?: pulumi.Input<string>;
    /**
     * Minimum availability.
     */
    minimumAvailability?: pulumi.Input<string>;
    /**
     * Import List name.
     */
    name?: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId?: pulumi.Input<number>;
    /**
     * Root folder path.
     */
    rootFolderPath?: pulumi.Input<string>;
    /**
     * Search on add flag.
     */
    searchOnAdd?: pulumi.Input<boolean>;
    /**
     * Should monitor.
     */
    shouldMonitor?: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Certification.
     */
    tmdbCertification?: pulumi.Input<string>;
    /**
     * TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
     */
    tmdbListType?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ImportListTmdbPopular resource.
 */
export interface ImportListTmdbPopularArgs {
    /**
     * Enable automatic add flag.
     */
    enableAuto?: pulumi.Input<boolean>;
    /**
     * Enabled flag.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Exclude genre IDs.
     */
    excludeGenreIds?: pulumi.Input<string>;
    /**
     * Include genre IDs.
     */
    includeGenreIds?: pulumi.Input<string>;
    /**
     * Language code.
     */
    languageCode: pulumi.Input<number>;
    /**
     * List order.
     */
    listOrder?: pulumi.Input<number>;
    /**
     * Min vote average.
     */
    minVoteAverage?: pulumi.Input<string>;
    /**
     * Min votes.
     */
    minVotes?: pulumi.Input<string>;
    /**
     * Minimum availability.
     */
    minimumAvailability: pulumi.Input<string>;
    /**
     * Import List name.
     */
    name: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId: pulumi.Input<number>;
    /**
     * Root folder path.
     */
    rootFolderPath: pulumi.Input<string>;
    /**
     * Search on add flag.
     */
    searchOnAdd?: pulumi.Input<boolean>;
    /**
     * Should monitor.
     */
    shouldMonitor: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Certification.
     */
    tmdbCertification?: pulumi.Input<string>;
    /**
     * TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.
     */
    tmdbListType: pulumi.Input<number>;
}
