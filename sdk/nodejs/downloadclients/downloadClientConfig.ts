// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Download Clients -->Download Client Config resource.
 * For more information refer to [Download Client](https://wiki.servarr.com/whisparr/settings#completed-download-handling) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as whisparr from "@maienm/pulumi-whisparr";
 *
 * const example = new whisparr.downloadclients.DownloadClientConfig("example", {
 *     autoRedownloadFailed: false,
 *     checkForFinishedDownloadInterval: 1,
 *     enableCompletedDownloadHandling: true,
 * });
 * ```
 *
 * ## Import
 *
 * import does not need parameters
 *
 * ```sh
 *  $ pulumi import whisparr:DownloadClients/downloadClientConfig:DownloadClientConfig example
 * ```
 */
export class DownloadClientConfig extends pulumi.CustomResource {
    /**
     * Get an existing DownloadClientConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DownloadClientConfigState, opts?: pulumi.CustomResourceOptions): DownloadClientConfig {
        return new DownloadClientConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'whisparr:DownloadClients/downloadClientConfig:DownloadClientConfig';

    /**
     * Returns true if the given object is an instance of DownloadClientConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DownloadClientConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DownloadClientConfig.__pulumiType;
    }

    /**
     * Auto Redownload Failed flag.
     */
    public readonly autoRedownloadFailed!: pulumi.Output<boolean>;
    /**
     * Check for finished download interval.
     */
    public readonly checkForFinishedDownloadInterval!: pulumi.Output<number>;
    /**
     * Download Client Working Folders.
     */
    public /*out*/ readonly downloadClientWorkingFolders!: pulumi.Output<string>;
    /**
     * Enable Completed Download Handling flag.
     */
    public readonly enableCompletedDownloadHandling!: pulumi.Output<boolean>;

    /**
     * Create a DownloadClientConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DownloadClientConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DownloadClientConfigArgs | DownloadClientConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DownloadClientConfigState | undefined;
            resourceInputs["autoRedownloadFailed"] = state ? state.autoRedownloadFailed : undefined;
            resourceInputs["checkForFinishedDownloadInterval"] = state ? state.checkForFinishedDownloadInterval : undefined;
            resourceInputs["downloadClientWorkingFolders"] = state ? state.downloadClientWorkingFolders : undefined;
            resourceInputs["enableCompletedDownloadHandling"] = state ? state.enableCompletedDownloadHandling : undefined;
        } else {
            const args = argsOrState as DownloadClientConfigArgs | undefined;
            if ((!args || args.autoRedownloadFailed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoRedownloadFailed'");
            }
            if ((!args || args.checkForFinishedDownloadInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'checkForFinishedDownloadInterval'");
            }
            if ((!args || args.enableCompletedDownloadHandling === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableCompletedDownloadHandling'");
            }
            resourceInputs["autoRedownloadFailed"] = args ? args.autoRedownloadFailed : undefined;
            resourceInputs["checkForFinishedDownloadInterval"] = args ? args.checkForFinishedDownloadInterval : undefined;
            resourceInputs["enableCompletedDownloadHandling"] = args ? args.enableCompletedDownloadHandling : undefined;
            resourceInputs["downloadClientWorkingFolders"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DownloadClientConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DownloadClientConfig resources.
 */
export interface DownloadClientConfigState {
    /**
     * Auto Redownload Failed flag.
     */
    autoRedownloadFailed?: pulumi.Input<boolean>;
    /**
     * Check for finished download interval.
     */
    checkForFinishedDownloadInterval?: pulumi.Input<number>;
    /**
     * Download Client Working Folders.
     */
    downloadClientWorkingFolders?: pulumi.Input<string>;
    /**
     * Enable Completed Download Handling flag.
     */
    enableCompletedDownloadHandling?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DownloadClientConfig resource.
 */
export interface DownloadClientConfigArgs {
    /**
     * Auto Redownload Failed flag.
     */
    autoRedownloadFailed: pulumi.Input<boolean>;
    /**
     * Check for finished download interval.
     */
    checkForFinishedDownloadInterval: pulumi.Input<number>;
    /**
     * Enable Completed Download Handling flag.
     */
    enableCompletedDownloadHandling: pulumi.Input<boolean>;
}
