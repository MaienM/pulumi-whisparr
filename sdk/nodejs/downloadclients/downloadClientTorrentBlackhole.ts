// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Download Clients -->Download Client Torrent Blackhole resource.
 * For more information refer to [Download Client](https://wiki.servarr.com/whisparr/settings#download-clients) and [TorrentBlackhole](https://wiki.servarr.com/whisparr/supported#torrentblackhole).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as whisparr from "@maienm/pulumi-whisparr";
 *
 * const example = new whisparr.downloadclients.DownloadClientTorrentBlackhole("example", {
 *     enable: true,
 *     magnetFileExtension: ".magnet",
 *     name: "Example",
 *     priority: 1,
 *     torrentFolder: "/torrent/",
 *     watchFolder: "/watch/",
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import whisparr:DownloadClients/downloadClientTorrentBlackhole:DownloadClientTorrentBlackhole example 1
 * ```
 */
export class DownloadClientTorrentBlackhole extends pulumi.CustomResource {
    /**
     * Get an existing DownloadClientTorrentBlackhole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DownloadClientTorrentBlackholeState, opts?: pulumi.CustomResourceOptions): DownloadClientTorrentBlackhole {
        return new DownloadClientTorrentBlackhole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'whisparr:DownloadClients/downloadClientTorrentBlackhole:DownloadClientTorrentBlackhole';

    /**
     * Returns true if the given object is an instance of DownloadClientTorrentBlackhole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DownloadClientTorrentBlackhole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DownloadClientTorrentBlackhole.__pulumiType;
    }

    /**
     * Enable flag.
     */
    public readonly enable!: pulumi.Output<boolean>;
    /**
     * Magnet file extension.
     */
    public readonly magnetFileExtension!: pulumi.Output<string>;
    /**
     * Download Client name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Read only flag.
     */
    public readonly readOnly!: pulumi.Output<boolean>;
    /**
     * Remove completed downloads flag.
     */
    public readonly removeCompletedDownloads!: pulumi.Output<boolean>;
    /**
     * Remove failed downloads flag.
     */
    public readonly removeFailedDownloads!: pulumi.Output<boolean>;
    /**
     * Save magnet files flag.
     */
    public readonly saveMagnetFiles!: pulumi.Output<boolean>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;
    /**
     * Torrent folder.
     */
    public readonly torrentFolder!: pulumi.Output<string>;
    /**
     * Watch folder flag.
     */
    public readonly watchFolder!: pulumi.Output<string>;

    /**
     * Create a DownloadClientTorrentBlackhole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DownloadClientTorrentBlackholeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DownloadClientTorrentBlackholeArgs | DownloadClientTorrentBlackholeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DownloadClientTorrentBlackholeState | undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["magnetFileExtension"] = state ? state.magnetFileExtension : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["removeCompletedDownloads"] = state ? state.removeCompletedDownloads : undefined;
            resourceInputs["removeFailedDownloads"] = state ? state.removeFailedDownloads : undefined;
            resourceInputs["saveMagnetFiles"] = state ? state.saveMagnetFiles : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["torrentFolder"] = state ? state.torrentFolder : undefined;
            resourceInputs["watchFolder"] = state ? state.watchFolder : undefined;
        } else {
            const args = argsOrState as DownloadClientTorrentBlackholeArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.torrentFolder === undefined) && !opts.urn) {
                throw new Error("Missing required property 'torrentFolder'");
            }
            if ((!args || args.watchFolder === undefined) && !opts.urn) {
                throw new Error("Missing required property 'watchFolder'");
            }
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["magnetFileExtension"] = args ? args.magnetFileExtension : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["removeCompletedDownloads"] = args ? args.removeCompletedDownloads : undefined;
            resourceInputs["removeFailedDownloads"] = args ? args.removeFailedDownloads : undefined;
            resourceInputs["saveMagnetFiles"] = args ? args.saveMagnetFiles : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["torrentFolder"] = args ? args.torrentFolder : undefined;
            resourceInputs["watchFolder"] = args ? args.watchFolder : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DownloadClientTorrentBlackhole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DownloadClientTorrentBlackhole resources.
 */
export interface DownloadClientTorrentBlackholeState {
    /**
     * Enable flag.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Magnet file extension.
     */
    magnetFileExtension?: pulumi.Input<string>;
    /**
     * Download Client name.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Read only flag.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Remove completed downloads flag.
     */
    removeCompletedDownloads?: pulumi.Input<boolean>;
    /**
     * Remove failed downloads flag.
     */
    removeFailedDownloads?: pulumi.Input<boolean>;
    /**
     * Save magnet files flag.
     */
    saveMagnetFiles?: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Torrent folder.
     */
    torrentFolder?: pulumi.Input<string>;
    /**
     * Watch folder flag.
     */
    watchFolder?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DownloadClientTorrentBlackhole resource.
 */
export interface DownloadClientTorrentBlackholeArgs {
    /**
     * Enable flag.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Magnet file extension.
     */
    magnetFileExtension?: pulumi.Input<string>;
    /**
     * Download Client name.
     */
    name: pulumi.Input<string>;
    /**
     * Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Read only flag.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Remove completed downloads flag.
     */
    removeCompletedDownloads?: pulumi.Input<boolean>;
    /**
     * Remove failed downloads flag.
     */
    removeFailedDownloads?: pulumi.Input<boolean>;
    /**
     * Save magnet files flag.
     */
    saveMagnetFiles?: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Torrent folder.
     */
    torrentFolder: pulumi.Input<string>;
    /**
     * Watch folder flag.
     */
    watchFolder: pulumi.Input<string>;
}
