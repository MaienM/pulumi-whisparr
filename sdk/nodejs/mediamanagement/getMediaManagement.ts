// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Media Management -->Media Management.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as whisparr from "@pulumi/whisparr";
 *
 * const example = whisparr.MediaManagement.getMediaManagement({});
 * ```
 */
export function getMediaManagement(opts?: pulumi.InvokeOptions): Promise<GetMediaManagementResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("whisparr:MediaManagement/getMediaManagement:getMediaManagement", {
    }, opts);
}

/**
 * A collection of values returned by getMediaManagement.
 */
export interface GetMediaManagementResult {
    /**
     * Auto rename folders.
     */
    readonly autoRenameFolders: boolean;
    /**
     * Auto unmonitor previously downloaded movies.
     */
    readonly autoUnmonitorPreviouslyDownloadedMovies: boolean;
    /**
     * Permission in linux format.
     */
    readonly chmodFolder: string;
    /**
     * Group used for permission.
     */
    readonly chownGroup: string;
    /**
     * Use hardlinks instead of copy.
     */
    readonly copyUsingHardlinks: boolean;
    /**
     * Create empty movies directories.
     */
    readonly createEmptyMovieFolders: boolean;
    /**
     * Delete empty movies directories.
     */
    readonly deleteEmptyFolders: boolean;
    /**
     * Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.
     */
    readonly downloadPropersAndRepacks: string;
    /**
     * Scan files details.
     */
    readonly enableMediaInfo: boolean;
    /**
     * Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).
     */
    readonly extraFileExtensions: string;
    /**
     * Define the file date modification. valid inputs are: 'none', 'localAirDate, and 'utcAirDate'.
     */
    readonly fileDate: string;
    /**
     * Delay Profile ID.
     */
    readonly id: number;
    /**
     * Import extra files. If enabled it will leverage 'extra*file*extensions'.
     */
    readonly importExtraFiles: boolean;
    /**
     * Minimum free space in MB to allow import.
     */
    readonly minimumFreeSpaceWhenImporting: number;
    /**
     * Path default static.
     */
    readonly pathsDefaultStatic: boolean;
    /**
     * Recycle bin absolute path.
     */
    readonly recycleBin: string;
    /**
     * Recyle bin days of retention.
     */
    readonly recycleBinCleanupDays: number;
    /**
     * Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.
     */
    readonly rescanAfterRefresh: string;
    /**
     * Set permission for imported files.
     */
    readonly setPermissionsLinux: boolean;
    /**
     * Skip free space check before importing.
     */
    readonly skipFreeSpaceCheckWhenImporting: boolean;
}
